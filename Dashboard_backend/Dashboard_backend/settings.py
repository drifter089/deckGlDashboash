"""
Django settings for Dashboard_backend project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from ctypes import cdll
from rest_framework.renderers import JSONRenderer
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Configuraci√≥n simplificada de GDAL
GDAL_LIBRARY_PATH = r'D:\Work\OET\Dashboard\Akshat DeckGL Version\deckGlDashboash\pixi_env\.pixi\envs\default\Library\bin\gdal.dll'
GEOS_LIBRARY_PATH = r'D:\Work\OET\Dashboard\Akshat DeckGL Version\deckGlDashboash\pixi_env\.pixi\envs\default\Library\bin\geos_c.dll'

# Configurar variables de entorno
os.environ['GDAL_DATA'] = r'D:\Work\OET\Dashboard\Akshat DeckGL Version\deckGlDashboash\pixi_env\.pixi\envs\default\Library\share\gdal'
os.environ['PROJ_LIB'] = r'D:\Work\OET\Dashboard\Akshat DeckGL Version\deckGlDashboash\pixi_env\.pixi\envs\default\Library\share\proj'

# Cargar GDAL manualmente
gdal_path = Path(r'D:\Work\OET\Dashboard\Akshat DeckGL Version\deckGlDashboash\pixi_env\.pixi\envs\default\Library\bin\gdal.dll')
if gdal_path.exists():
    cdll.LoadLibrary(str(gdal_path))
else:
    raise ImportError(f"No se pudo encontrar GDAL en {gdal_path}")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-*4ng&zk%&ibzp3x2kjc@4wuw2is5&7w_tp*!+q%gr0$ruwv$%1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '34.31.13.149']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'rest_framework',
    'corsheaders',
    'api',
    # 'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True  # Solo para desarrollo

ROOT_URLCONF = 'Dashboard_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Dashboard_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'pypsa_earth_db',
        'USER': 'postgres',
        'PASSWORD': 'oetpostgres',
        'HOST': '34.68.214.20',  
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

class CustomJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, float):
            if obj != obj:  # NaN
                return None
            if obj == float('inf'):
                return 'Infinity'
            if obj == float('-inf'):
                return '-Infinity'
        return super().default(obj)

class CustomJSONRenderer(JSONRenderer):
    encoder_class = CustomJSONEncoder

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'path.to.CustomJSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}
